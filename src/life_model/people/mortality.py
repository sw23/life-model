# Copyright 2025 Spencer Williams
#
# Use of this source code is governed by an MIT license:
# https://github.com/sw23/life-model/blob/main/LICENSE

import random
from .person import GenderAtBirth

# Actuarial mortality table for the US population
# https://www.ssa.gov/oact/STATS/table4c6.html

# Probabilities of death for each age from 0 to 119
# [Age, Male Probability, Female % Probability]
mortality_rates = [
    [0,   0.006064, 0.005119],
    [1,   0.000491, 0.000398],
    [2,   0.000309, 0.000240],
    [3,   0.000248, 0.000198],
    [4,   0.000199, 0.000160],
    [5,   0.000167, 0.000134],
    [6,   0.000143, 0.000118],
    [7,   0.000126, 0.000109],
    [8,   0.000121, 0.000106],
    [9,   0.000121, 0.000106],
    [10,  0.000127, 0.000111],
    [11,  0.000143, 0.000121],
    [12,  0.000171, 0.000140],
    [13,  0.000227, 0.000162],
    [14,  0.000320, 0.000188],
    [15,  0.000451, 0.000224],
    [16,  0.000622, 0.000276],
    [17,  0.000826, 0.000337],
    [18,  0.001026, 0.000395],
    [19,  0.001182, 0.000450],
    [20,  0.001301, 0.000496],
    [21,  0.001404, 0.000532],
    [22,  0.001498, 0.000567],
    [23,  0.001586, 0.000610],
    [24,  0.001679, 0.000650],
    [25,  0.001776, 0.000699],
    [26,  0.001881, 0.000743],
    [27,  0.001985, 0.000796],
    [28,  0.002095, 0.000855],
    [29,  0.002219, 0.000924],
    [30,  0.002332, 0.000988],
    [31,  0.002445, 0.001053],
    [32,  0.002562, 0.001123],
    [33,  0.002653, 0.001198],
    [34,  0.002716, 0.001263],
    [35,  0.002791, 0.001324],
    [36,  0.002894, 0.001403],
    [37,  0.002994, 0.001493],
    [38,  0.003091, 0.001596],
    [39,  0.003217, 0.001700],
    [40,  0.003353, 0.001803],
    [41,  0.003499, 0.001905],
    [42,  0.003642, 0.002009],
    [43,  0.003811, 0.002116],
    [44,  0.003996, 0.002223],
    [45,  0.004175, 0.002352],
    [46,  0.004388, 0.002516],
    [47,  0.004666, 0.002712],
    [48,  0.004973, 0.002936],
    [49,  0.005305, 0.003177],
    [50,  0.005666, 0.003407],
    [51,  0.006069, 0.003642],
    [52,  0.006539, 0.003917],
    [53,  0.007073, 0.004238],
    [54,  0.007675, 0.004619],
    [55,  0.008348, 0.005040],
    [56,  0.009051, 0.005493],
    [57,  0.009822, 0.005987],
    [58,  0.010669, 0.006509],
    [59,  0.011548, 0.007067],
    [60,  0.012458, 0.007658],
    [61,  0.013403, 0.008305],
    [62,  0.014450, 0.008991],
    [63,  0.015571, 0.009681],
    [64,  0.016737, 0.010343],
    [65,  0.017897, 0.011018],
    [66,  0.019017, 0.011743],
    [67,  0.020213, 0.012532],
    [68,  0.021569, 0.013512],
    [69,  0.023088, 0.014684],
    [70,  0.024828, 0.016025],
    [71,  0.026705, 0.017468],
    [72,  0.028761, 0.019195],
    [73,  0.031116, 0.021195],
    [74,  0.033861, 0.023452],
    [75,  0.037088, 0.025980],
    [76,  0.041126, 0.029153],
    [77,  0.045241, 0.032394],
    [78,  0.049793, 0.035888],
    [79,  0.054768, 0.039676],
    [80,  0.060660, 0.044156],
    [81,  0.067027, 0.049087],
    [82,  0.073999, 0.054635],
    [83,  0.081737, 0.061066],
    [84,  0.090458, 0.068431],
    [85,  0.100525, 0.076841],
    [86,  0.111793, 0.086205],
    [87,  0.124494, 0.096851],
    [88,  0.138398, 0.109019],
    [89,  0.153207, 0.121867],
    [90,  0.169704, 0.135805],
    [91,  0.187963, 0.151108],
    [92,  0.208395, 0.168020],
    [93,  0.230808, 0.186340],
    [94,  0.253914, 0.206432],
    [95,  0.277402, 0.228086],
    [96,  0.300882, 0.250406],
    [97,  0.324326, 0.273699],
    [98,  0.347332, 0.296984],
    [99,  0.369430, 0.319502],
    [100, 0.391927, 0.342716],
    [101, 0.414726, 0.366532],
    [102, 0.437722, 0.390844],
    [103, 0.460800, 0.415531],
    [104, 0.483840, 0.440463],
    [105, 0.508032, 0.466891],
    [106, 0.533434, 0.494904],
    [107, 0.560105, 0.524599],
    [108, 0.588111, 0.556075],
    [109, 0.617516, 0.589439],
    [110, 0.648392, 0.624805],
    [111, 0.680812, 0.662294],
    [112, 0.714852, 0.702031],
    [113, 0.750595, 0.744153],
    [114, 0.788125, 0.788125],
    [115, 0.827531, 0.827531],
    [116, 0.868907, 0.868907],
    [117, 0.912353, 0.912353],
    [118, 0.957970, 0.957970],
    [119, 1.000000, 1.000000],
]


def get_chance_of_mortality(age: int, gender: GenderAtBirth) -> float:
    """Get the chance of mortality for a given age and gender"""
    # Bound age to valid range
    age = 0 if age < 0 else 119 if age > 119 else age
    # Map gender to the correct index in the mortality_rates array
    gender_idx = 1 if gender == GenderAtBirth.MALE else 2
    # Find the mortality rate for the given age and gender
    entry = next((x for x in mortality_rates if x[0] == age), mortality_rates[-1])
    return entry[gender_idx]


def get_random_mortality(age: int, gender: GenderAtBirth) -> bool:
    """Get a random chance of mortality for a given age and gender"""
    return random.random() <= get_chance_of_mortality(age, gender)
